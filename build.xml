<?xml version="1.0"?>

<project default="build" basedir=".">

  <!-- set global properties for this build -->
  <property name="project.name" value="jamm"/>
  <property name="project.version" value="0.9.4"/>
  <property name="project.string"
            value="${project.name}-${project.version}" />

  <!-- This must be done before any other propertes -->
  <property file="${basedir}/build.properties" />
  <property file="${user.home}/.build.properties" />

  <path id="lib.path">
    <pathelement path="${servlet.jar}" />
    <pathelement path="${cryptix.jar}" />
    <fileset dir="${struts.lib}" includes="*.jar"/>
    <fileset dir="${jaxp.lib}" includes="*.jar"/>
    <pathelement path="${cli.jar}" />
  </path>

  <path id="xdoclet.path">
    <pathelement path="${ant.home}/lib/ant.jar" />
    <pathelement path="${xdoclet.jar}" />
    <pathelement path="${log4j.jar}" />
  </path>

  <taskdef name="webdoclet" classname="xdoclet.web.WebDocletTask">
    <classpath>
      <path refid="xdoclet.path" />
    </classpath>
  </taskdef>

  <taskdef name="checkstyle"
           classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
    <classpath>
      <pathelement path="${checkstyle.jar}" />
    </classpath>
  </taskdef>

  <target name="build-properties-check">
    <condition property="build.properties.uptodate">
      <and>
        <available file="build.properties" />
        <available file="src/build.properties" />
        <uptodate targetfile="build.properties">
          <srcfiles dir="src" includes="build.properties" />
        </uptodate>
      </and>
    </condition>
  </target>

  <target name="build-properties-up-to-date"
          unless="build.properties.uptodate"
          depends="build-properties-check">
    <fail message="build.properties is out of date or missing." />
  </target>

  <target name="prepare" depends="build-properties-up-to-date">
    <mkdir dir="build" />
    <mkdir dir="build/backend/classes" />
    <mkdir dir="build/webapp/root" />
    <mkdir dir="build/webapp/root/WEB-INF" />
    <mkdir dir="build/webapp/root/WEB-INF/classes" />
    <mkdir dir="build/webapp/root/WEB-INF/lib" />
    <mkdir dir="build/webapp/root/WEB-INF/tld" />

    <mkdir dir="build/util/classes" />
    <mkdir dir="build/util/dist/lib" />
    <mkdir dir="build/util/dist/bin" />

    <mkdir dir="test" />
    <mkdir dir="test/backend/classes" />
    <mkdir dir="test/webapp/classes" />

    <mkdir dir="dist" />
  </target>

  <target name="build-util" depends="prepare, build-backend"
          description="Builds all code for the util parts">
    <depend srcDir="src/util/java" destDir="build/util/classes"
            cache="build/util/depcache" closure="yes">
      <classpath>
        <pathelement location="build/backend/classes" />
        <path refid="lib.path" />
      </classpath>
    </depend>
    <javac srcdir="src/util/java"
           destdir="build/util/classes"
           optimize="${compile.optimize}" debug="${compile.debug}"
           deprecation="${compile.deprecation}">
      <classpath>
        <pathelement location="build/backend/classes" />
        <path refid="lib.path" />
      </classpath>
    </javac>
    <jar jarfile="build/util/dist/lib/${project.string}-util.jar"
         basedir="build/util/classes">
      <manifest>
        <attribute name="Main-Class" value="jamm.tools.JammCleaner"/>
      </manifest>
    </jar>
    <copy todir="build/util/dist/lib"
          file="build/backend/${project.name}-backend.jar" />
    <copy todir="build/util/dist/lib"
          file="${cli.jar}" />
    <copy todir="build/util/dist/bin"
          file="src/util/shell/jammCleaner" />
    <chmod file="build/util/dist/bin/jammCleaner" perm="555" />
  </target>

  <target name="build-backend" depends="prepare"
          description="Builds all code for the backend.">
    <depend srcDir="src/backend/java" destDir="build/backend/classes"
            cache="build/backend/depcache" closure="yes" />
    <javac srcdir="src/backend/java"
       destdir="build/backend/classes"
           optimize="${compile.optimize}" debug="${compile.debug}"
           classpathref="lib.path" />

    <depend srcDir="src/backend/test/java" destDir="test/backend/classes"
            cache="test/backend/depcache" closure="yes">
      <classpath>
        <pathelement location="build/backend/classes" />
      </classpath>
    </depend>
    <javac srcdir="src/backend/test/java"
           destdir="test/backend/classes"
           debug="on" optimize="off">
      <classpath>
        <pathelement location="build/backend/classes" />
        <path refid="lib.path" />
      </classpath>
    </javac>
    <jar jarfile="build/backend/${project.name}-backend.jar"
         basedir="build/backend/classes"/>
  </target>
  <target name="b-b" depends="build-backend" />

  <target name="build-webapp-java" depends="prepare, build-backend"
          description="Builds all code for the web application.">
    <depend srcDir="src/webapp/java"
            destDir="build/webapp/root/WEB-INF/classes"
            cache="build/webapp/depcache" closure="yes">
      <classpath>
        <pathelement location="build/backend/classes" />
        <path refid="lib.path" />
      </classpath>
    </depend>
    <javac srcdir="src/webapp/java"
           destdir="build/webapp/root/WEB-INF/classes"
           optimize="${compile.optimize}" debug="${compile.debug}"
           deprecation="${compile.deprecation}">
      <classpath>
        <pathelement location="build/backend/classes" />
        <path refid="lib.path" />
      </classpath>
    </javac>

    <depend srcDir="src/webapp/test/java"
            destDir="build/webapp/root/WEB-INF/classes"
            cache="test/webapp/depcache" closure="yes">
      <classpath>
        <pathelement location="build/webapp/root/WEB-INF/classes" />
        <pathelement location="build/backend/classes" />
        <path refid="lib.path" />
      </classpath>
    </depend>
    <javac srcdir="src/webapp/test/java" destdir="test/webapp/classes"
           debug="on" optimize="off">
      <classpath>
        <pathelement location="build/webapp/root/WEB-INF/classes" />
        <pathelement location="build/backend/classes" />
        <path refid="lib.path" />
      </classpath>
    </javac>

    <copy todir="build/webapp/root">
      <fileset dir="src/webapp/content" includes="**/*" />
    </copy>

    <replace file="build/webapp/root/WEB-INF/common/header.jsp"
             token="%VERSION%" value="${project.version}"/>
    
    <replace file="build/webapp/root/WEB-INF/common/private_header.jsp"
             token="%VERSION%" value="${project.version}"/>

    <copy todir="build/webapp/root/WEB-INF/lib"
          file="build/backend/${project.name}-backend.jar" />

    <copy todir="build/webapp/root/WEB-INF/lib" file="${cryptix.jar}" />

    <copy todir="build/webapp/root/WEB-INF/tld">
      <fileset dir="${struts.lib}" includes="*.tld" />
    </copy>

    <copy todir="build/webapp/root/WEB-INF/lib">
      <fileset dir="${struts.lib}" includes="*.jar" />
    </copy>

    <copy todir="build/webapp/root/WEB-INF/classes/">
      <fileset dir="src/webapp/config/properties/" includes="*" />
    </copy>

    <copy todir="build/webapp/root/WEB-INF/"
          file="src/webapp/config/struts-config.xml"/>
    <copy todir="build/webapp/root/WEB-INF/"
          file="src/webapp/config/tileDefinitions.xml"/>
    <copy todir="build/webapp/root/WEB-INF/"
          file="src/webapp/config/jamm.properties"/>
    <copy todir="build/webapp/root/WEB-INF/"
          file="src/webapp/config/jamm.properties.dist"/>
  </target>
  <target name="b-w-j" depends="build-webapp-java" />

  <target name="build-webapp-webdoclet" depends="build-webapp-java">
    <webdoclet sourcepath="src/webapp/java"
               destdir="build/webapp/generated"
               packagenames="jamm.*">
      <classpath>
        <pathelement location="build/backend/classes" />
        <path refid="lib.path" />
        <path refid="xdoclet.path" />
      </classpath>

      <deploymentdescriptor servletspec="2.3"
                            destdir="build/webapp/root/WEB-INF"
                            sessiontimeout="30"
                            mergedir="src/webapp/config/web-merge"
                            displayname="Jamm"
                            description="Java Mail Manager">
      </deploymentdescriptor>
      <jsptaglib jspversion="1.2" destdir="build/webapp/root/WEB-INF/tld"
                 shortname="jamm" filename="jamm.tld" />
    </webdoclet>
  </target>
  <target name="b-w-w" depends="build-webapp-webdoclet" />

  <target name="build-webapp" depends="build-webapp-java" />

  <target name="build" depends="build-webapp, build-backend, build-util" />

  <target name="test-backend" depends="build-backend">
    <junit printsummary="yes" fork="yes" haltonfailure="yes">
      <classpath>
        <pathelement location="test/backend/classes" />
        <pathelement location="build/backend/classes" />
        <path refid="lib.path" />
      </classpath>
      <jvmarg value="-Dlog4j.disableOverride=${log4j.disableOverride}" />

      <formatter type="plain" />
      <test name="jamm.AllTests"
            outfile="test/backend/results" />
    </junit>
  </target>
  <target name="t-b" depends="test-backend" />

  <target name="test" depends="test-backend" />

  <target name="dist-webapp"
      depends="build-webapp, build-webapp-webdoclet">
    <jar jarfile="build/${project.string}.war"
         basedir="build/webapp/root"
         excludes="WEB-INF/jamm.properties"/>
  </target>

  <target name="dist-util"
          depends="build-util, build-backend">
    <tar destfile="build/jammUtils-${project.version}.tar">
      <tarfileset dir="build/util/dist">
        <include name="**/*"/>
        <exclude name="bin/jammCleaner"/>
      </tarfileset>
      <tarfileset dir="build/util/dist" mode="555">
        <include name="bin/jammCleaner"/>
      </tarfileset>
    </tar>
  </target>
    
  <target name="dist" depends="dist-webapp, dist-util" />

  <target name="checkstyle">
    <checkstyle properties="checkstyle.properties">
      <fileset dir="src/webapp/java" includes="**/*.java" />
    </checkstyle>
    <checkstyle properties="checkstyle.properties"
                javadocScope="nothing">
      <fileset dir="src/webapp/test/java" includes="**/*.java" />
    </checkstyle>
    <checkstyle properties="checkstyle.properties">
      <fileset dir="src/backend/java" includes="**/*.java" />
    </checkstyle>
    <checkstyle properties="checkstyle.properties"
                javadocScope="nothing">
      <fileset dir="src/backend/test" includes="**/*.java" />
    </checkstyle>
    <checkstyle properties="checkstyle.properties">
      <fileset dir="src/util/java" includes="**/*.java" />
    </checkstyle>
  </target>
  <target name="cs" depends="checkstyle" />

  <target name="prepare-doc" depends="prepare">
    <mkdir dir="build/doc/api" />
  </target>
  
  <target name="doc" depends="prepare-doc">
    <javadoc packagenames="jamm.*"
             destdir="build/doc/api"
             author="true"
             version="true"
             use="true"
             windowtitle="Jamm API"
             private="${javadoc.private}"
             doctitle="Jamm API">
      <link offline="true"
            href="http://java.sun.com/j2se/1.3/docs/api/"
            packageListLoc="${javadoc.1.3.local}"/>
      <sourcepath>
        <pathelement location="src/backend/java" />
        <pathelement location="src/backend/test/java" />
        <pathelement location="src/webapp/java" />
        <pathelement location="src/util/java" />
      </sourcepath>
      <classpath>
        <path refid="lib.path" />
        <pathelement location="${ant.home}/lib/junit.jar" />
      </classpath>
    </javadoc>
  </target>

  <target name="dist-src" depends="prepare">
    <delete dir="build/dist-src/${project.string}"/>
    <mkdir dir="build/dist-src/${project.string}"/>
    <copy todir="build/dist-src/${project.string}">
      <fileset dir=".">
        <exclude name="build/**"/>
        <exclude name="test/**"/>
        <exclude name="dist/**"/>
        <exclude name="build.properties"/>
        <exclude name="src/webapp/config/jamm.properties"/>
      </fileset>
    </copy>
    <tar tarfile="build/${project.string}.tar"
         basedir="build/dist-src"/>
    <gzip zipfile="dist/${project.string}.tar.gz"
          src="build/${project.string}.tar"/>
    <!-- Make text files DOS-compatible before making zip file-->
    <fixcrlf srcdir="build/dist-src" eol="crlf"
             excludes="**/*.jpg,**/*.gif"/>
    <zip zipfile="dist/${project.string}.zip"
         basedir="build/dist-src"/>
  </target>

  <target name="dist-bin" depends="dist">
    <delete dir="build/dist-bin/${project.string}"/>
    <mkdir dir="build/dist-bin/${project.string}"/>
    <copy todir="build/dist-bin/${project.string}" flatten="yes">
      <fileset dir=".">
        <include name="INSTALL"/>
        <include name="README"/>
        <include name="LICENSE"/>
        <include name="NEWS"/>
        <include name="UPGRADE"/>
        <include name="src/schema/jamm.schema"/>
        <include name="doc/samples/sample.ldif"/>
        <include name="build/${project.string}.war"/>
        <include name="build/jammUtils-${project.version}.tar"/>
        <include name="src/util/perl/updateLdif.pl"/>
      </fileset>
    </copy>
    <chmod file="build/dist-bin/${project.string}/updateLdif.pl" perm="555" />
    <tar tarfile="build/${project.string}-bin.tar"
         basedir="build/dist-bin"/>
    <gzip zipfile="dist/${project.string}-bin.tar.gz"
          src="build/${project.string}-bin.tar"/>
    <!-- Make text files DOS-compatible before making zip file-->
    <fixcrlf srcdir="build/dist-bin" eol="crlf"
             excludes="**/*.war,**/*.jar,**/*.tar,**/*.gz"/>
    <zip zipfile="dist/${project.string}-bin.zip"
         basedir="build/dist-bin"/>
  </target>

  <target name="clean">
    <delete dir="build" />
    <delete dir="test" />
    <delete dir="dist" />
  </target>

</project>
